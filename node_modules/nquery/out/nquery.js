/**
* nQuery 0.5.0
* @license MIT
* https://github.com/dangeredwolf/nQuery
**/
(function (exports) {
	'use strict';

	var eventHandler = ((eventName, objects, ...args) => {
	  for (let i = 0; i < objects.length; i++) {
	    let obj = objects[i];
	    args.length <= 0 ? obj.dispatchEvent(new Event(eventName, ...args)) : obj.addEventListener(eventName, ...args);
	  }

	  return objects;
	});

	var handler = ((moduleSet, eventName) => {
	  moduleSet[eventName] = (...args) => eventHandler(eventName, ...args);
	});

	let prom = Promise;
	prom.prototype.done = prom.prototype.then;
	prom.prototype.fail = prom.prototype.catch;
	prom.prototype.always = prom.prototype.finally;
	let nQueryPromise = prom;

	var ajax = ((...a) => {
	  var request = new XMLHttpRequest();
	  let promise = new nQueryPromise((resolve, reject) => {
	    let settings = a[1] ? a[1] : a[0];

	    if (typeof a[0] === "string") {
	      if (typeof a[1] !== "object") {
	        settings = {
	          url: a[0]
	        };
	      } else {
	        settings.url = a[0];
	      }
	    }

	    request.open(settings.method || "GET", settings.url, typeof settings.async === "undefined" ? true : settings.async, settings.username, settings.password);

	    if (settings.dataType) {
	      request.overrideMimeType(settings.dataType);
	    }

	    request.addEventListener("load", () => {
	      var res = request.responseText;

	      try {
	        res = JSON.parse(res);
	      } catch (e) {}

	      resolve(res);
	    });
	    request.addEventListener("error", reject);
	    request.addEventListener("abort", reject);
	    let str;

	    if (typeof request.body === "object") {
	      str = JSON.stringify(request.body);
	    } else {
	      str = request.body;
	    }

	    request.send(str);
	  });
	  return promise;
	});

	// Stub, for now.
	var ajaxComplete = (() => {});

	// Stub, for now.
	var ajaxPrefilter = (() => {});

	// Stub, for now.
	var ajaxSuccess = (() => {});

	var Deferred = (func => {
	  let promise = new nQueryPromise();
	  func(promise);
	  return promise;
	});

	var eachGlobal = ((arr, func) => arr.forEach(obj => func(obj)));

	var extend = ((target, ...args) => {
	  args.forEach(prop => Object.assign(target, prop));
	});

	var now = (() => Date.now());

	var trim = (str => str.trim());

	var type = (object => typeof object);

	var support = (object => {
	});

	// stub right now;
	var when = (object => object);

	var version = "0.5.0";

	var ready = ((objects, func) => {
	  if (window.nQuery.__ready) {
	    (func ? func : objects || (() => {}))();
	  } else {
	    window.nQuery.__internal_r.push(func);
	  }
	});

	var add = ((objects, add) => {
	  let newElems = nQuery(add);
	  newElems.forEach(elem => objects.push(elem));
	  return objects;
	});

	class nQueryObject$1 extends Array {
	  constructor(objects) {
	    super(); // for X in Y loops are somehow unbelievably slow here.. it's kinda amazing... so instead we use a fast incremental loop

	    for (var i = 0; i < objects.length; i++) {
	      this[i] = objects[i];
	    }
	  }

	}

	class nQueryElement extends nQueryObject$1 {
	  constructor(objects) {
	    super(objects);
	  }

	}

	function normalizeElementArray(obj) {
	  // don't forget that nQueryObject is an instance of Array
	  // https://stackoverflow.com/questions/22289727/difference-between-using-array-isarray-and-instanceof-array
	  if (obj === null) {
	    return [];
	  } else if (obj instanceof Array || obj instanceof NodeList || obj instanceof HTMLCollection || obj instanceof nQueryElement) {
	    if (typeof obj[0] === "string") {
	      return document.querySelectorAll(obj[0]);
	    }

	    return obj;
	  } else if (obj instanceof HTMLElement) {
	    return [obj];
	  } else if (typeof obj === "string") {
	    if (obj.match(/<.+>/g) === null) {
	      try {
	        return document.querySelectorAll(obj);
	      } catch (e) {
	        console.error(e);
	        return [];
	      }
	    } else {
	      return renderHTML(obj);
	    }
	  } else if (typeof obj !== "undefined") {
	    console.warn("nQuery Warning: nQuery was passed an unrecognised data type. The data we received is output using console.info.");
	    console.info(obj);
	    return [obj];
	  }

	  return [];
	}
	function splitCSSClasses(...a) {
	  let result = [];

	  for (let i in a) {
	    if (typeof a[i] === "string") a[i].split(" ").forEach(cssClass => result.push(cssClass));else if (a[i] instanceof Array) for (let j in a[i]) {
	      a[i][j].split(" ").forEach(cssClass => result.push(cssClass));
	    }
	  }

	  return result;
	}
	function renderHTML(html) {
	  let temp = document.createElement("div");
	  temp.innerHTML = html;
	  let object = temp.children;
	  temp.remove();
	  return object;
	}

	var addClass = ((objects, ...classes) => {
	  for (let i = 0; i < objects.length; i++) {
	    let cssClasses = splitCSSClasses(classes);

	    for (let j = 0; j < cssClasses.length; j++) {
	      objects[i].classList.add(cssClasses[j]);
	    }
	  }

	  return objects;
	});

	var after = ((objects, ...elements) => {
	  normalizeElementArray(elements).forEach(element => {
	    var _objects$;

	    (_objects$ = objects[0]) === null || _objects$ === void 0 ? void 0 : _objects$.insertAdjacentElement('afterend', element);
	  });
	  return objects;
	});

	var append = ((objects, ...elements) => {
	  objects.forEach(obj => elements.forEach(element => {
	    var _normalizeElementArra, _normalizeElementArra2;

	    (_normalizeElementArra = normalizeElementArray(element)) === null || _normalizeElementArra === void 0 ? void 0 : (_normalizeElementArra2 = _normalizeElementArra.forEach) === null || _normalizeElementArra2 === void 0 ? void 0 : _normalizeElementArra2.call(_normalizeElementArra, realElement => realElement && obj.appendChild(realElement));
	  }));
	  return objects;
	});

	var attr = ((objects, attr, value) => {
	  let attrObject = {};
	  let useValue = typeof value !== "undefined";

	  if (typeof attr === "object") {
	    attrObject = attr;
	    useValue = true;
	  } else {
	    attrObject[attr] = value;
	  }

	  if (useValue) {
	    for (let i in attrObject) {
	      console.log(i);
	      objects.forEach(obj => obj.setAttribute(i, attrObject[i]));
	    }
	  } else {
	    if (objects[0]) {
	      return objects[0].getAttribute(attr) || undefined;
	    }
	  }

	  console.log(objects);
	  return objects;
	});

	var children = ((objects, matches) => {
	  let results = [];
	  objects.forEach(obj => {
	    for (let i = 0; i < ((_obj$children = obj.children) === null || _obj$children === void 0 ? void 0 : _obj$children.length); i++) {
	      var _obj$children;

	      if (!matches || obj.children[i].matches(matches)) {
	        results.push(obj.children[i]);
	      }
	    }
	  });
	  return nQuery(results);
	});

	var css = ((objects, css, value) => {
	  if (value || typeof css === "object" && !(css instanceof Array)) {
	    if (value) {
	      objects.forEach(obj => obj.style[css] = typeof value === "number" ? value + "px" : value);
	    } else {
	      for (let i in css) {
	        objects.forEach(obj => obj.style[i] = typeof css[i] === "number" ? css[i] + "px" : css[i]);
	      }
	    }
	  } else {
	    if (typeof css === "string") {
	      return getComputedStyle(objects[0]).getPropertyValue(css);
	    } else if (typeof css === "object") {
	      let results = {};
	      let compStyles = getComputedStyle(objects[0]);
	      css === null || css === void 0 ? void 0 : css.forEach(property => {
	        results[property] = compStyles.getPropertyValue(property);
	      });
	      return results;
	    }
	  }
	});

	var data = ((objects, tag, value) => {
	  if (typeof value === "undefined") {
	    var _objects$;

	    return (_objects$ = objects[0]) === null || _objects$ === void 0 ? void 0 : _objects$.getAttribute("data-" + tag);
	  }

	  for (let i = 0; i < objects.length; i++) {
	    objects[i].setAttribute("data-" + tag, value);
	  }

	  return objects;
	});

	var each = ((objects, func) => {
	  objects.forEach((obj, i) => {
	    func === null || func === void 0 ? void 0 : func(i);
	  });
	  return objects;
	});

	var find = ((objects, matches) => {
	  let results = [];

	  let find = obj => {
	    if (obj.children) {
	      for (let i = 0; i < obj.children.length; i++) {
	        if (obj.children[i].matches(matches)) {
	          results.push(obj.children[i]);
	        }

	        find(obj.children[i]);
	      }
	    }
	  };

	  objects.forEach(obj => find(obj));
	  return nQuery(results);
	});

	var first = (objects => nQuery([objects[0]]));

	var hasClass = ((objects, ...args) => {
	  let result = false;
	  objects.forEach(obj => splitCSSClasses(args).forEach(cssClasses => {
	    var _obj$classList;

	    return result = result || ((_obj$classList = obj.classList) === null || _obj$classList === void 0 ? void 0 : _obj$classList.contains(cssClasses));
	  }));
	  return result;
	});

	var height = ((objects, set) => {
	  if (set) {
	    objects.forEach(obj => obj.style.height = typeof set === "string" ? set : set + "px");
	  } else {
	    try {
	      return parseFloat(getComputedStyle(objects[0], null).height.replace("px", ""));
	    } catch (e) {
	      var _objects$;

	      return (_objects$ = objects[0]) === null || _objects$ === void 0 ? void 0 : _objects$.offsetHeight;
	    }
	  }
	});

	var hide = (objects => {
	  objects.forEach(obj => obj.style.display = "none");
	  return objects;
	});

	var html = ((objects, value) => {
	  if (typeof value === "undefined") {
	    var _objects$;

	    return (_objects$ = objects[0]) === null || _objects$ === void 0 ? void 0 : _objects$.innerHTML;
	  }

	  objects.forEach(obj => {
	    obj.innerHTML = value;
	  });
	  return objects;
	});

	var innerHeight = (objects => {
	  if (objects[0] instanceof Window) return objects[0].innerHeight;else return window.getComputedStyle(objects[0], null).getPropertyValue("Height");
	});

	var innerWidth = (objects => {
	  if (objects[0] instanceof Window) return objects[0].innerWidth;else return window.getComputedStyle(objects[0], null).getPropertyValue("width");
	});

	var insertBefore = ((objects, ...elements) => {
	  objects.forEach(obj => elements.forEach(element => normalizeElementArray(element).forEach(realElement => obj.insertBefore(realElement))));
	  return objects;
	});

	var is = ((objects, selector) => {
	  let result = false;
	  objects.forEach(obj => {
	    var _obj$matches;

	    result = result || ((_obj$matches = obj.matches) === null || _obj$matches === void 0 ? void 0 : _obj$matches.call(obj, selector));
	  });
	  return result;
	});

	var next = (objects => {
	  var _objects$;

	  return (_objects$ = objects[0]) === null || _objects$ === void 0 ? void 0 : _objects$.nextElementSibling;
	});

	var on = ((objects, eventName, ...args) => {
	  objects.forEach(obj => {
	    obj.__nq_event = obj.__nq_event || [];

	    obj.__nq_event.push(obj.addEventListener(eventName, ...args));
	  });
	  return objects;
	});

	var one = ((objects, eventName, func, ...args) => {
	  objects.forEach(obj => {
	    obj.addEventListener(eventName, e => {
	      obj.removeEventListener(eventName);
	      func(e);
	    }, ...args);
	  });
	  return objects;
	});

	var off = ((objects, eventName, ...args) => {
	  // Remove all event listeners if not passed with eventName
	  objects.forEach(obj => {
	    if (typeof obj.__nq_event === "undefined") {
	      return;
	    }

	    if (!eventName) {
	      for (let i = 0; i < obj.__nq_event.length; i++) {
	        var e = obj.__nq_event[i];
	        obj.removeEventListener(e.type, e);
	      }
	    } else {
	      splitCSSClasses(eventName).forEach(eventNames => {
	        for (let i = 0; i < obj.__nq_event.length; i++) {
	          var e = obj.__nq_event[i];

	          if (e.type === eventNames) {
	            obj.removeEventListener(e.type, e);
	          }
	        }
	      });
	      objects.forEach(obj => obj.removeEventListener(eventName, ...args));
	    }
	  });
	  return objects;
	});

	var outerHeight = (objects => {
	  if (objects[0] instanceof Window) return objects[0].outerHeight;else return objects[0].offsetHeight;
	});

	var outerWidth = (objects => {
	  if (objects[0] instanceof Window) return objects[0].outerWidth;else return objects[0].offsetWidth;
	});

	var parents = ((objects, matches) => {
	  let results = [];
	  let obj = objects[0];

	  while (obj && obj.nodeName !== "HTML") {
	    results.push(obj);
	    obj = obj.parentElement;
	  }

	  return nQuery(results);
	});

	var parent = (objects => {
	  var _objects$;

	  return nQuery((_objects$ = objects[0]) === null || _objects$ === void 0 ? void 0 : _objects$.parentElement);
	});

	var position = (objects => {
	  var _objects$, _objects$2;

	  return {
	    left: (_objects$ = objects[0]) === null || _objects$ === void 0 ? void 0 : _objects$.offsetLeft,
	    top: (_objects$2 = objects[0]) === null || _objects$2 === void 0 ? void 0 : _objects$2.offsetTop
	  };
	});

	var prepend = ((objects, ...elements) => {
	  objects.forEach(obj => elements.forEach(element => {
	    var _normalizeElementArra;

	    return (_normalizeElementArra = normalizeElementArray(element)) === null || _normalizeElementArra === void 0 ? void 0 : _normalizeElementArra.forEach(realElement => obj.insertBefore(realElement, obj === null || obj === void 0 ? void 0 : obj.firstChild));
	  }));
	  return objects;
	});

	var prev = (objects => {
	  var _objects$;

	  return (_objects$ = objects[0]) === null || _objects$ === void 0 ? void 0 : _objects$.previousElementSibling;
	});

	var remove = (objects => {
	  for (let i = 0; i < objects.length; i++) obj.remove();

	  return objects;
	});

	var removeAttr = ((objects, ...args) => {
	  objects.forEach(obj => args.forEach(attr => obj.removeAttribute(attr)));
	  return objects;
	});

	var removeClass = ((objects, ...args) => {
	  for (let i = 0; i < objects.length; i++) {
	    let cssClasses = splitCSSClasses(args);

	    for (let j = 0; j < cssClasses.length; j++) {
	      objects[i].classList.remove(cssClasses[j]);
	    }
	  }

	  return objects;
	});

	var replaceWith = ((objects, value) => {
	  objects.forEach(obj => obj.outerHTML = value);
	  return objects;
	});

	var scrollTop = ((objects, set) => {
	  if (set) {
	    objects.forEach(obj => obj.style.scrollTop = typeof set === "string" ? set : set + "px");
	  } else {
	    var _objects$;

	    (_objects$ = objects[0]) === null || _objects$ === void 0 ? void 0 : _objects$.scrollTop;
	  }
	});

	var show = (objects => {
	  objects.forEach(obj => obj.style.display = null);
	  return objects;
	});

	var siblings = (objects => {
	  let results = [];

	  for (let o = 0; o < objects.length; o++) {
	    let children = objects[o].parentNode.children;

	    for (let i = 0; i < children.length; i++) {
	      if (children[i] !== objects[o]) {
	        results.push(children[i]);
	      }
	    }
	  }

	  return nQuery(results);
	});

	var text = ((objects, value) => {
	  if (typeof value === "undefined") {
	    var _objects$;

	    return (_objects$ = objects[0]) === null || _objects$ === void 0 ? void 0 : _objects$.innerText;
	  }

	  objects.forEach(obj => {
	    obj.innerText = value;
	  });
	  return objects;
	});

	var toggleClass = ((objects, ...args) => {
	  objects.forEach(obj => splitCSSClasses(args).forEach(cssClass => {
	    var _obj$classList, _obj$classList$toggle;

	    return (_obj$classList = obj.classList) === null || _obj$classList === void 0 ? void 0 : (_obj$classList$toggle = _obj$classList.toggle) === null || _obj$classList$toggle === void 0 ? void 0 : _obj$classList$toggle.call(_obj$classList, cssClass);
	  }));
	  return objects;
	});

	var trigger = ((objects, eventName, ...args) => {
	  objects.forEach(obj => {
	    obj.dispatchEvent(new Event(eventName, ...args));
	  });
	  return objects;
	});

	var width = ((objects, set) => {
	  if (set) {
	    objects.forEach(obj => obj.style.width = typeof set === "string" ? set : set + "px");
	  } else {
	    try {
	      return parseFloat(getComputedStyle(objects[0], null).width.replace("px", ""));
	    } catch (e) {
	      var _objects$;

	      return (_objects$ = objects[0]) === null || _objects$ === void 0 ? void 0 : _objects$.offsetWidth;
	    }
	  }
	});

	/*
		nQuery Config

		This is where any configurable compile-time options are stored.
	*/
	let windowModules = []; // Modules for Window objects

	let documentModules = []; // Modules for Document objects

	let objectModules = []; // Modules accessible from any nQueryObject (but not global)

	let globalModules = []; // Modules accessible via window.$ / window.nQuery

	let elementModules = []; // Modules accessible from Element objects
	globalModules.ajax = ajax;
	globalModules.ajaxComplete = ajaxComplete;
	documentModules.ajaxComplete = ajaxComplete;
	globalModules.ajaxPrefilter = ajaxPrefilter;
	documentModules.ajaxPrefilter = ajaxPrefilter;
	globalModules.ajaxSuccess = ajaxSuccess;
	documentModules.ajaxSuccess = ajaxSuccess;
	globalModules.Deferred = Deferred;
	globalModules.each = eachGlobal;
	globalModules.extend = extend;
	globalModules.now = now;
	globalModules.trim = trim;
	globalModules.type = type;
	globalModules.support = support;
	globalModules.when = when; // Object modules
	objectModules.jquery = version; // Document modules
	documentModules.ready = ready;
	globalModules.ready = ready; // ready is also accessible globally (nQuery.ready)
	elementModules.add = add;
	elementModules.addClass = addClass;
	elementModules.after = after;
	elementModules.append = append;
	elementModules.attr = attr;
	elementModules.children = children;
	handler(elementModules, "blur");
	handler(elementModules, "click");
	handler(elementModules, "change");
	handler(elementModules, "contextmenu");
	elementModules.css = css;
	elementModules.data = data;
	handler(elementModules, "dblclick");
	elementModules.each = each;
	elementModules.find = find;
	elementModules.first = first;
	elementModules.hasClass = hasClass;
	elementModules.height = height;
	windowModules.height = height;
	documentModules.height = height;
	elementModules.hide = hide;
	handler(elementModules, "hover");
	elementModules.html = html;
	elementModules.innerHeight = innerHeight;
	windowModules.innerHeight = innerHeight;
	elementModules.innerWidth = innerWidth;
	windowModules.innerWidth = innerWidth;
	elementModules.insertBefore = insertBefore;
	elementModules.is = is;
	windowModules.is = is;
	handler(elementModules, "mousedown");
	handler(elementModules, "mouseenter");
	handler(elementModules, "mouseleave");
	handler(elementModules, "mousemove");
	handler(elementModules, "mouseout");
	handler(elementModules, "mouseover");
	handler(elementModules, "mouseup");
	elementModules.next = next;
	elementModules.on = on;
	documentModules.on = on;
	windowModules.on = on; // alias for legacy "bind"

	elementModules.bind = on;
	documentModules.bind = on;
	windowModules.bind = on;
	elementModules.one = one;
	documentModules.one = one;
	windowModules.one = one;
	elementModules.off = off;
	documentModules.off = off;
	windowModules.off = off;
	elementModules.outerHeight = outerHeight;
	documentModules.outerHeight = outerHeight;
	windowModules.outerHeight = outerHeight;
	elementModules.outerWidth = outerWidth;
	documentModules.outerWidth = outerWidth;
	windowModules.outerWidth = outerWidth;
	elementModules.parents = parents;
	elementModules.parent = parent;
	elementModules.position = position;
	elementModules.prepend = prepend;
	elementModules.prev = prev;
	handler(elementModules, "resize");
	handler(windowModules, "resize"); // also should work on window
	elementModules.remove = remove;
	elementModules.removeAttr = removeAttr;
	elementModules.removeClass = removeClass;
	elementModules.replaceWith = replaceWith;
	handler(elementModules, "scroll");
	handler(windowModules, "scroll"); // also should work on window
	elementModules.scrollTop = scrollTop;
	elementModules.show = show;
	elementModules.siblings = siblings;
	elementModules.text = text;
	elementModules.toggleClass = toggleClass;
	elementModules.trigger = trigger;
	windowModules.trigger = trigger; // also should work on window

	documentModules.trigger = trigger; // also should work on window
	elementModules.width = width;
	windowModules.width = width;
	documentModules.width = width;

	class nQueryDocument extends nQueryObject$1 {
	  constructor(objects) {
	    super(objects);
	  }

	}

	class nQueryWindow extends nQueryObject$1 {
	  constructor(objects) {
	    super(objects);
	  }

	}

	class nQueryPlugins {
	  constructor() {
	    return new Proxy(this, this);
	  }

	  set(target, plugin, val) {
	    window.nQueryObject.prototype[plugin] = function () {
	      val.apply(this, arguments);
	    };

	    return true;
	  }

	  get(target, plugin) {
	    console.log(plugin);

	    if (plugin === "extend") {
	      return function (exts) {
	        for (let ext in exts) {
	          nQueryObject.prototype[ext] = function () {
	            exts[ext].apply(this, arguments);
	          };
	        }
	      };
	    }

	    return window.nQueryObject.prototype[plugin];
	  }

	}

	function nQuery(object) {
	  if (typeof object === "string") {
	    if (object.match(/<.+>/g) === null) {
	      object = document.querySelectorAll(object);
	    } else {
	      object = renderHTML(object);
	    }
	  }

	  if (typeof object === "function" && typeof nQuery.ready === "function") {
	    nQuery.ready(object);
	    return;
	  }

	  if (object instanceof window.nQueryObject) {
	    return object;
	  } else if (object instanceof Document) {
	    return new window.nQueryDocument([object]);
	  } else if (object instanceof Window) {
	    return new window.nQueryWindow([object]);
	  } else {
	    return new window.nQueryElement(normalizeElementArray(object));
	  }
	} // Module loader

	for (let i in objectModules) {
	  nQueryObject$1.prototype[i] = objectModules[i];
	}

	for (let i in globalModules) {
	  nQuery[i] = function (...args) {
	    return globalModules[i].call(this, ...args);
	  };
	}

	for (let i in elementModules) {
	  nQueryElement.prototype[i] = function (...args) {
	    return elementModules[i].call(this, this, ...args);
	  };
	}

	for (let i in documentModules) {
	  nQueryDocument.prototype[i] = function (...args) {
	    return documentModules[i].call(this, this, ...args);
	  };
	}

	for (let i in windowModules) {
	  nQueryWindow.prototype[i] = function (...args) {
	    return windowModules[i].call(this, this, ...args);
	  };
	}

	nQuery.toString = () => "nQuery " + version;

	nQuery.__debugMethods = {
	  normalizeElementArray: normalizeElementArray,
	  renderHTML: renderHTML,
	  splitCSSClasses: splitCSSClasses
	};
	nQuery.__internal_r = [];
	nQuery.fn = new nQueryPlugins();
	document.addEventListener("DOMContentLoaded", () => {
	  for (let i = 0; i < window.nQuery.__internal_r.length; i++) {
	    window.nQuery.__internal_r[i]();
	  }

	  window.nQuery.__ready = true;
	});

	if ( !window.$) {
	  window.$ = nQuery;
	}

	if ( !window.jQuery) {
	  window.jQuery = nQuery;
	}

	window.nQuery = nQuery;
	window.nQueryObject = nQueryObject$1;
	window.nQueryDocument = nQueryDocument;
	window.nQueryElement = nQueryElement;
	window.nQueryWindow = nQueryWindow;
	window.nQueryPromise = nQueryPromise;

	exports.nQuery = nQuery;

	return exports;

}({}));
//# sourceMappingURL=nquery.js.map
